generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model casino_p_toplist {
  id      Int    @id @default(autoincrement())
  geo     String
  code    String
  casino  Int[]
  def     Int
  list_id Int

  @@index(fields: casino)
}

model outbounding {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  casinoId    Int?
  casino_outs casino_p_casinos? @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  gameId      Int?
  game_outs   casino_p_games?   @relation(fields: [gameId], references: [game_id], onDelete: Cascade)
}

model casino_filter_condition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  authorId  String
  condition String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index(fields: authorId)
}

model contactMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  message   String
  name      String
  email     String
  toEmail   String
  read      Boolean  @default(false)
  replyed   Boolean  @default(false)
  author    User     @relation(fields: [email], references: [email], onDelete: Cascade)
}

model ChatMessage {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  message   String
  authorId  String
  like      Int       @default(0)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     tb_pbot[]
}

model forums {
  id        Int          @id @default(autoincrement())
  title     String
  path      String
  public    Int
  order     Int?
  description String?

}
model shoutMessage {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  message   String
  authorId  String
  type      Int             @default(1)
  subId     Int?            @default(1) 
  depth    Int             @default(1)
  parent    String?          
  like      Int             @default(0)
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     tb_pbot_shout[]
  root   shoutMessage? @relation("replied", fields: [parent], references: [id], onDelete: Cascade)
  reply     shoutMessage[] @relation("replied")
}

model tb_pbot {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  messageId String
  authorId  String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index(fields: [authorId, messageId])
}

model tb_pbot_shout {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  messageId String
  authorId  String
  author    User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  shout     shoutMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index(fields: [authorId, messageId])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  title     String
  content   String?
  published Boolean    @default(false)
  authorId  String?
  vote_up   Int?
  vote_down Int?
  added     String?
  comments  Comments[]
  author    User?      @relation(fields: [authorId], references: [id])
}

model Comments {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  type            Int?
  parentId        Int?
  postId          String?
  content         String?
  published       Boolean           @default(false)
  authorId        String
  casinoId        Int?
  gameId          Int?
  newsId          Int?
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  casino_comments casino_p_casinos? @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  game_comments   casino_p_games?   @relation(fields: [gameId], references: [game_id], onDelete: Cascade)
  news            News?             @relation(fields: [newsId], references: [id], onDelete: Cascade)
  posts           Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index(fields: [parentId, type, authorId, gameId, newsId])
}

model Rating {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  type           Int?
  parentId       Int?
  rating         Int?
  published      Boolean           @default(false)
  authorId       String
  casinoId       Int?
  gameId         Int?
  author         User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  casino_ratings casino_p_casinos? @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  game_ratings   casino_p_games?   @relation(fields: [gameId], references: [game_id], onDelete: Cascade)

  @@index(fields: [parentId, type, authorId, gameId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?                 @map("email_verified")
  added_mailer             Int?
  image                    String?
  vercel_image_store       String?
  image_backup             String?
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  user_lvl                 String?
  bio                      String? 
  isAdmin                  Boolean?                  @default(false)
  role                     Int?                      @default(1)
  afcRewards               Int                       @default(0)
  paypal_email             String?
  chest                    String?
  chest2                   String?
  chatMessages             ChatMessage[]
  shoutMessage             shoutMessage[]
  comments                 Comments[]
  news                     News[]
  posts                    Post[]
  ratings                  Rating[]
  ScratchCardAward         ScratchCardAward[]
  scratchCard              ScratchCardGame[]
  accounts                 Account[]
  casino_filter_conditions casino_filter_condition[]
  sessions                 Session[]
  tb_pbots                 tb_pbot[]
  tb_pbots_shout           tb_pbot_shout[]
  contactMessages          contactMessage[]

  @@index(fields: [email, role])
  @@map("users")
}

model News {
  id               Int     @id @default(autoincrement())
  title            String
  description      String
  image            String
  vercel_image_url String?
  category         String
  subCategory      String?
  authorId         String
  link             String?

  createdAt DateTime   @default(now()) @map("created_at")
  comments  Comments[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index(fields: [category, subCategory, authorId])
}

model vb_user {
  userid   Int     @id
  username String?
  email    String? @unique
  user_afc Int     @default(0)

  @@index(fields: email)
}

model ScratchCardGame {
  id               Int                @id @default(autoincrement())
  user_id          String
  outcome          String[]
  prize            String?
  chipset          String[]
  freePlay         Boolean            @default(true)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  ScratchCardAward ScratchCardAward[]
  user             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index(fields: user_id)
}

model ScratchCardAward {
  id        Int             @id @default(autoincrement())
  awarded   Boolean
  usdAmount Int
  game_id   Int
  user_id   String
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  game      ScratchCardGame @relation(fields: [game_id], references: [id])
  user      User            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index(fields: [user_id, game_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model casino_p_bonus_lang {
  id      Int    @id @default(autoincrement())
  parent  Int
  letters String
  deny    Int?
}

model site_setting {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value String
}

model casino_p_casinos {
  id                        Int                             @id @default(autoincrement())
  aff_id                    Int?
  casino                    String?
  type                      String?
  url                       String?
  software                  String?
  approved                  Int?
  updated                   String?
  hot                       Int?
  new                       Int?
  rogue                     Int?
  button                    String?
  blurb                     String?
  softwareid                Int
  telephone                 String?
  contactemail              String?
  livechat                  Int?
  mobile                    Int?
  homepageimage             String?
  livegames                 Int?
  clean_name                String?
  currencies                String?
  datialsupdate             Int?
  currency_val              Int?
  review_overall            Int?
  nodeposit                 Int?
  freespins                 Int?
  bonus_percent             Int?
  deposit                   Int?
  vercel_image_url          String?
  vercel_image_size         Int?
  vercel_casino_button      String?
  vercel_casino_button_size Int?
  casino_comments           Comments[]
  casino_outs               outbounding[]
  casino_ratings            Rating[]
  banklist                  casino_p_bank_connect[]
  bonuses                   casino_p_bonus[]
  casino_cons               casino_p_casino_cons[]
  casino_faq                casino_p_casino_faq[]
  casino_pros               casino_p_casino_pros[]
  review                    casino_p_descriptions_casinos[]
  jurisdictions             casino_p_jurisdictions[]
  meta                      casino_p_meta_casinos[]
  casino_geo                casino_p_restrictions[]
  softwares                 casino_p_software_link[]
  bonusfeed                 casino_p_publish_articles[]

  @@index(fields: [id, nodeposit, freespins, deposit, bonus_percent, mobile, livegames, hot, new, approved, rogue])
}

model casino_p_meta_casinos {
  m_id        Int              @id @default(autoincrement())
  c_id        Int
  s_id        Int
  title       String?
  description String?
  meta        casino_p_casinos? @relation(fields: [c_id], references: [id])

  @@index(fields: c_id)
}

model casino_p_meta_games {
  m_id        Int            @id @default(autoincrement())
  c_id        Int
  s_id        Int
  title       String?
  description String?
  meta        casino_p_games @relation(fields: [s_id], references: [game_id], onDelete: Cascade)

  @@index(fields: c_id)
}

model casino_p_descriptions_casinos {
  id               Int              @id @default(autoincrement())
  parent           Int
  title            String?
  description      String?
  ordered          Int?
  type             Int?
  description_link String?
  record           String?
  review           casino_p_casinos? @relation(fields: [parent], references: [id], onDelete: Cascade, map: "description_casino_fk")

  @@index(fields: parent)
}

model casino_p_descriptions_games {
  id               Int            @id @default(autoincrement())
  parent           Int
  title            String?
  description      String?
  ordered          Int?
  type             Int?
  description_link String?
  record           String?
  review           casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade, map: "description_game_fk")

  @@index(fields: parent)
}

model casino_p_software {
  id                Int                      @id @default(autoincrement())
  software_name     String?
  status            Int?
  link              String?
  smallimage        String?
  image             String?
  show              Int?
  vercel_image_url  String?
  vercel_image_size Int?
  slots_launch_id   Int?
  games             casino_p_games[]
  softwarelist      casino_p_software_link[]
  subcontent        casino_p_subcontent[]
}

model casino_p_software_link {
  id           Int                @id @default(autoincrement())
  casino       Int?
  software     Int?
  softwares    casino_p_casinos?  @relation(fields: [casino], references: [id])
  softwarelist casino_p_software? @relation(fields: [software], references: [id])

  @@index(fields: [casino, software])
}

model casino_p_games {
  game_id                Int                           @id @default(autoincrement())
  game_land_based        String?
  game_name              String
  game_software          Int
  game_added             String?
  game_progressive       Int?
  game_random_jackpot    Int?
  game_demo              String?
  game_min_bet           String?
  game_max_bet           String?
  game_line_bet          String?
  game_max_payout        String?
  game_bonus_bet         String?
  game_decks             Int?
  game_live_dealer       Int?
  game_reels             Int?
  game_lines             Int?
  game_multi_spin        Int?
  game_bonus_round       Int?
  game_bonus_multipliers Int?
  game_scatters          Int?
  game_free_spins        Int?
  game_wild_slot         Int?
  game_theme             String?
  game_hands             Int?
  game_wild_cards        Int?
  status                 Int?
  game_image             String?
  game_updated           String?
  game_clean_name        String?
  game_payout            String?
  game_fixed_bet         String?
  vercel_image_url       String?
  vercel_image_size      Int?
  game_comments          Comments[]
  game_ratings           Rating[]
  game_outs              outbounding[]
  review                 casino_p_descriptions_games[]
  software               casino_p_software             @relation(fields: [game_software], references: [id])
  game_cons              casino_p_games_cons[]
  game_faq               casino_p_games_faq[]
  game_images            casino_p_games_image[]
  game_pros              casino_p_games_pros[]
  meta                   casino_p_meta_games[]
  slot_theme             casino_p_slot_details[]
  bonuslist              casino_p_publish_articles[]

  @@index(fields: [game_software, vercel_image_url, vercel_image_size])
}

model casino_p_pages {
  id          Int     @id @default(autoincrement())
  name        String?
  title       String?
  description String?
  keywords    String?
  option1     String?
  option2     String?
  typeof      String?
  mymeta      String?
  redirect    String?
}

model casino_p_lcb_juristrictions {
  id                Int                      @id @default(autoincrement())
  name              String
  jurisdiction_data casino_p_jurisdictions[]
}

model casino_p_jurisdictions {
  jid               Int                         @id @default(autoincrement())
  casino_id         Int?
  jurisdiction_id   Int
  jurisdictions     casino_p_casinos?           @relation(fields: [casino_id], references: [id])
  jurisdiction_data casino_p_lcb_juristrictions @relation(fields: [jurisdiction_id], references: [id])

  @@index(fields: casino_id)
}

model casino_p_banks {
  id                     Int                     @id @default(autoincrement())
  name                   String
  display                String
  image                  String?
  largeimage             String?
  description            String?
  rank                   Int?
  status                 Int?
  w                      Int?
  h                      Int?
  tw                     Int?
  th                     Int?
  link                   String?
  vercel_image_url       String?
  vercel_image_size      Int?
  vercel_largeimage_url  String?
  vercel_largeimage_size Int?
  bank_data              casino_p_bank_connect[]

  @@index(fields: [vercel_image_url, vercel_image_size, vercel_largeimage_url, vercel_largeimage_size])
}

model casino_p_bank_connect {
  id        Int               @id
  parent    Int?
  bank      Int?
  type      Int?
  bank_data casino_p_banks?   @relation(fields: [bank], references: [id])
  banklist  casino_p_casinos? @relation(fields: [parent], references: [id])

  @@index(fields: [parent, bank])
}

model casino_p_bonus {
  id               Int              @id @default(autoincrement())
  parent           Int
  game             String?
  freespins        Int?
  freeplay         String?
  nodeposit        Int?
  deposit          Int?
  deposit_amount   Int?
  name             String?
  comments         String?
  position         Int?
  code             String?
  active           Int?
  playthrough      Int?
  type             String?
  link             String?
  max_cashout      String?
  cashable         Int?
  exclusive        Int?
  added            String?
  update_main      Int?
  currency         String?
  multi_currency   String?
  wager            String?
  percent          Int?
  exported         String?
  geo              String?
  geo_deny         String?
  casino_p_casinos casino_p_casinos? @relation(fields: [parent], references: [id])

  @@index(fields: [parent, freespins, nodeposit, deposit, deposit_amount, position, active, percent])
}

model casino_p_games_image {
  game_image_id       Int            @id @default(autoincrement())
  game_image_url      String
  vercel_image_url    String?
  vercel_image_size   Int?
  game_image_alt_text String?
  game_image_name     String?
  game_image_parent   Int
  game_image_position Int?
  w                   Int?
  h                   Int?
  tw                  Int?
  th                  Int?
  status              String?
  game_images         casino_p_games @relation(fields: [game_image_parent], references: [game_id], onDelete: Cascade)
}

model casino_p_slot_details {
  id         Int            @id @default(autoincrement())
  parent     Int
  theme      String
  slot_theme casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade)

  @@index(fields: parent)
}

model casino_p_restrictions {
  id         Int              @id @default(autoincrement())
  casino     Int
  country    String
  allow      Int?
  casino_geo casino_p_casinos @relation(fields: [casino], references: [id])

  @@index(fields: [casino, country, allow])
}

model casino_p_games_pros {
  id        Int            @id @default(autoincrement())
  game      Int
  title     String
  content   String
  game_pros casino_p_games @relation(fields: [game], references: [game_id], onDelete: Cascade)

  @@index(fields: game)
}

model casino_p_games_cons {
  id        Int            @id @default(autoincrement())
  game      Int
  title     String
  content   String
  game_cons casino_p_games @relation(fields: [game], references: [game_id], onDelete: Cascade)

  @@index(fields: game)
}

model casino_p_games_faq {
  id       Int            @id @default(autoincrement())
  game     Int
  question String
  answer   String
  game_faq casino_p_games @relation(fields: [game], references: [game_id], onDelete: Cascade)

  @@index(fields: game)
}

model casino_p_casino_pros {
  id          Int              @id @default(autoincrement())
  casino      Int
  title       String
  content     String
  casino_pros casino_p_casinos @relation(fields: [casino], references: [id])

  @@index(fields: casino)
}

model casino_p_casino_cons {
  id          Int              @id @default(autoincrement())
  casino      Int
  title       String
  content     String
  casino_cons casino_p_casinos? @relation(fields: [casino], references: [id])

  @@index(fields: casino)
}

model casino_p_casino_faq {
  id         Int              @id @default(autoincrement())
  casino     Int
  question   String
  answer     String
  casino_faq casino_p_casinos? @relation(fields: [casino], references: [id])

  @@index(fields: casino)
}

model casino_p_subcontent {
  id             Int               @id @default(autoincrement())
  type           Int
  content_id     Int
  content        String
  content_linked String?
  title          String?
  subcontent     casino_p_software @relation(fields: [content_id], references: [id])

  @@index(fields: [content_id, type])
}

model casino_p_publish_categories {
  c_id   Int    @id @default(autoincrement())
  name   String
  slug   String
  active Int?
}

model casino_p_publish_articles {
  a_id             Int              @id
  article          String
  original         String?
  date             Int?
  status           Int?
  article_linked   String?
  image            String?
  title            String?
  code             String?
  alttext          String?
  votes            Int?
  url              String?
  fromcasino       Int?
  tweeted          Int?
  facebook         Int?
  google           Int?
  bonuscode        String?
  bonuspercent     Int?
  bonusamount      Int?
  maxcashout       Int?
  freespins        Int?
  bonusplaythrough Int?
  exclusive        Int?
  nodeposit        Int?
  freetime         Int?
  playertype       Int?
  tournament       Int?
  startdate        String?
  enddate          String?
  userid           Int?
  afcpoints        Int?
  fubar            Int?
  emailcheck       Int?
  casino_id        Int
  game_id          Int?
  groups           Int[]
  casino_name      String?
  game_ids         String?
  hash             String?
  casino           casino_p_casinos? @relation(fields: [casino_id], references: [id])
  game             casino_p_games?  @relation(fields: [game_id], references: [game_id])
}

model slots_launch {
  id            Int     @id
  name          String
  slug          String
  description   String?
  url           String?
  thumb         String?
  provider_id   Int
  provider      String
  provider_slug String
  type_id       Int
  type          String
  type_slug     String
  theme_id      Int?
  theme         String?
  theme_slug    String?
  megaways      Int
  bonus_buy     Int
  progressive   Int
  featured      Int
  created_at    String
  updated_at    String
  published     Int
  afc_id        Int?
}
